// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Os = require("os");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");

var getToday = (function() {
  let date = new Date();
  return new Date(date.getTime() - (date.getTimezoneOffset() * 60000))
    .toISOString()
    .split("T")[0];
});

var todosPath = "./todo.txt";

var encoding = "utf8";

function identifyCommand(cmd, cmdArg) {
  switch (cmd) {
    case "add" :
        return /* Add */{
                _0: cmdArg
              };
    case "help" :
        return /* Help */0;
    case "ls" :
        return /* Ls */1;
    default:
      return /* Help */0;
  }
}

var CommandAndArguments = {
  identifyCommand: identifyCommand
};

function help(param) {
  console.log("Usage :-\n$ ./todo add \"todo item\"  # Add a new todo\n$ ./todo ls               # Show remaining todos\n$ ./todo del NUMBER       # Delete a todo\n$ ./todo done NUMBER      # Complete a todo\n$ ./todo help             # Show usage\n$ ./todo report           # Statistics");
  
}

function readFrom(filePath) {
  if (!Fs.existsSync(filePath)) {
    return [];
  }
  var fileContent = Fs.readFileSync(filePath, {
        encoding: encoding,
        flag: "r"
      });
  var todos = fileContent.split(Os.EOL);
  return todos.filter(function (todo) {
              return todo !== "";
            });
}

function writeTo(filePath, todos) {
  var fileContent = Belt_Array.joinWith(todos, Os.EOL, (function (todo) {
          return todo;
        }));
  Fs.writeFileSync(filePath, fileContent, {
        encoding: encoding,
        flag: "w"
      });
  
}

function appendTo(filePath, todo) {
  Fs.appendFileSync(filePath, todo, {
        encoding: encoding,
        flag: "a"
      });
  
}

function ls(param) {
  var todos = readFrom(todosPath);
  if (todos.length !== 0) {
    console.log(Belt_Array.reduceWithIndex(Belt_Array.reverse(todos), "", (function (str, todo, index) {
                return str + ("[" + String(todos.length - index | 0) + "] " + todo + " " + Os.EOL);
              })));
  } else {
    console.log("There are no pending todos!");
  }
  
}

function add(todo) {
  if (todo !== undefined) {
    appendTo(todosPath, todo);
    console.log("Added todo: \"" + todo + "\"");
  } else {
    console.log("Error: Missing todo string. Nothing added!");
  }
  
}

var Functions = {
  help: help,
  readFrom: readFrom,
  writeTo: writeTo,
  appendTo: appendTo,
  ls: ls,
  add: add
};

var cmd = Belt_Option.getWithDefault(Belt_Array.get(process.argv, 2), "help").trim();

var cmdArg = Belt_Array.get(process.argv, 3);

var cmd$1 = identifyCommand(cmd, cmdArg);

if (typeof cmd$1 === "number") {
  if (cmd$1 !== 0) {
    ls(undefined);
  } else {
    console.log("Usage :-\n$ ./todo add \"todo item\"  # Add a new todo\n$ ./todo ls               # Show remaining todos\n$ ./todo del NUMBER       # Delete a todo\n$ ./todo done NUMBER      # Complete a todo\n$ ./todo help             # Show usage\n$ ./todo report           # Statistics");
  }
} else {
  add(cmd$1._0);
}

var donePath = "./done.txt";

exports.getToday = getToday;
exports.todosPath = todosPath;
exports.donePath = donePath;
exports.encoding = encoding;
exports.CommandAndArguments = CommandAndArguments;
exports.Functions = Functions;
exports.cmdArg = cmdArg;
exports.cmd = cmd$1;
/* cmd Not a pure module */

// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Os = require("os");
var Curry = require("bs-platform/lib/js/curry.js");
var Belt_Int = require("bs-platform/lib/js/belt_Int.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");

var getToday = (function() {
  let date = new Date();
  return new Date(date.getTime() - (date.getTimezoneOffset() * 60000))
    .toISOString()
    .split("T")[0];
});

var todosPath = "./todo.txt";

var donePath = "./done.txt";

var encoding = "utf8";

function identifyCommand(cmd, cmdArg) {
  switch (cmd) {
    case "add" :
        return {
                TAG: /* Add */0,
                _0: cmdArg
              };
    case "del" :
        return {
                TAG: /* Del */1,
                _0: Belt_Option.flatMap(cmdArg, Belt_Int.fromString)
              };
    case "done" :
        return {
                TAG: /* Done */2,
                _0: Belt_Option.flatMap(cmdArg, Belt_Int.fromString)
              };
    case "help" :
        return /* Help */0;
    case "ls" :
        return /* Ls */1;
    case "report" :
        return /* Report */2;
    default:
      return /* Help */0;
  }
}

var CommandAndArguments = {
  identifyCommand: identifyCommand
};

function help(param) {
  console.log("Usage :-\n$ ./todo add \"todo item\"  # Add a new todo\n$ ./todo ls               # Show remaining todos\n$ ./todo del NUMBER       # Delete a todo\n$ ./todo done NUMBER      # Complete a todo\n$ ./todo help             # Show usage\n$ ./todo report           # Statistics");
  
}

function readFrom(filePath) {
  if (!Fs.existsSync(filePath)) {
    return [];
  }
  var fileContent = Fs.readFileSync(filePath, {
        encoding: encoding,
        flag: "r"
      });
  var todos = fileContent.split(Os.EOL);
  return todos.filter(function (todo) {
              return todo !== "";
            });
}

function writeTo(filePath, todos) {
  var fileContent = Belt_Array.joinWith(todos, Os.EOL, (function (todo) {
          return todo;
        }));
  Fs.writeFileSync(filePath, fileContent, {
        encoding: encoding,
        flag: "w"
      });
  
}

function appendTo(filePath, todo) {
  var todo$1 = todo + Os.EOL;
  Fs.appendFileSync(filePath, todo$1, {
        encoding: encoding,
        flag: "a"
      });
  
}

function ls(param) {
  var todos = readFrom(todosPath);
  if (todos.length !== 0) {
    console.log(Belt_Array.reduceWithIndex(Belt_Array.reverse(todos), "", (function (str, todo, index) {
                return str + ("[" + String(todos.length - index | 0) + "] " + todo + Os.EOL);
              })));
  } else {
    console.log("There are no pending todos!");
  }
  
}

function add(todo) {
  if (todo !== undefined) {
    appendTo(todosPath, todo);
    console.log("Added todo: \"" + todo + "\"");
  } else {
    console.log("Error: Missing todo string. Nothing added!");
  }
  
}

function del(todo_no) {
  if (todo_no !== undefined) {
    if (!Fs.existsSync(todosPath)) {
      return ;
    }
    var todos = readFrom(todosPath);
    if (todo_no <= todos.length && todo_no > 0) {
      var updatedTodos = todos.filter(function (param, index) {
            return (index + 1 | 0) !== todo_no;
          });
      console.log("Deleted todo #" + String(todo_no));
      return writeTo(todosPath, updatedTodos);
    }
    console.log("Error: todo #" + String(todo_no) + " does not exist. Nothing deleted.");
    return ;
  }
  console.log("Error: Missing NUMBER for deleting todo.");
  
}

function markDone(todo_no) {
  if (todo_no !== undefined) {
    if (!Fs.existsSync(todosPath)) {
      return ;
    }
    var todos = readFrom(todosPath);
    if (todo_no <= todos.length && todo_no > 0) {
      var completedTodo = "x " + Curry._1(getToday, undefined) + " " + Caml_array.get(todos, todo_no - 1 | 0);
      appendTo(donePath, completedTodo);
      var updatedTodos = todos.filter(function (param, index) {
            return (index + 1 | 0) !== todo_no;
          });
      writeTo(todosPath, updatedTodos);
      console.log("Marked todo #" + String(todo_no) + " as done.");
      return ;
    }
    console.log("Error: todo #" + String(todo_no) + " does not exist.");
    return ;
  }
  console.log("Error: Missing NUMBER for marking todo as done.");
  
}

function report(param) {
  var pendingTodos = Fs.existsSync(todosPath) ? readFrom(todosPath).length : 0;
  var completedTodos = Fs.existsSync(donePath) ? readFrom(donePath).length : 0;
  console.log(Curry._1(getToday, undefined) + " Pending : " + String(pendingTodos) + " Completed : " + String(completedTodos));
  
}

function execute(command) {
  if (typeof command === "number") {
    switch (command) {
      case /* Help */0 :
          console.log("Usage :-\n$ ./todo add \"todo item\"  # Add a new todo\n$ ./todo ls               # Show remaining todos\n$ ./todo del NUMBER       # Delete a todo\n$ ./todo done NUMBER      # Complete a todo\n$ ./todo help             # Show usage\n$ ./todo report           # Statistics");
          return ;
      case /* Ls */1 :
          return ls(undefined);
      case /* Report */2 :
          return report(undefined);
      
    }
  } else {
    switch (command.TAG | 0) {
      case /* Add */0 :
          return add(command._0);
      case /* Del */1 :
          return del(command._0);
      case /* Done */2 :
          return markDone(command._0);
      
    }
  }
}

var Functions = {
  help: help,
  readFrom: readFrom,
  writeTo: writeTo,
  appendTo: appendTo,
  ls: ls,
  add: add,
  del: del,
  markDone: markDone,
  report: report,
  execute: execute
};

var cmd = Belt_Option.getWithDefault(Belt_Array.get(process.argv, 2), "help").trim();

var cmdArg = Belt_Array.get(process.argv, 3);

var cmd$1 = identifyCommand(cmd, cmdArg);

execute(cmd$1);

exports.getToday = getToday;
exports.todosPath = todosPath;
exports.donePath = donePath;
exports.encoding = encoding;
exports.CommandAndArguments = CommandAndArguments;
exports.Functions = Functions;
exports.cmdArg = cmdArg;
exports.cmd = cmd$1;
/* cmd Not a pure module */
